#!/bin/bash
. ./ADDRESS

. ./developer_sign_file
. ./developer_upload_version_folder

UPLOAD_API_KEY=$1
SET_TO_LATEST_FLAG=$2
RELEASE_NOTES_FILENAME="release_notes.txt"

rm -rf /tmp/hypersomnia-deployment
mkdir  /tmp/hypersomnia-deployment
mkdir  /tmp/hypersomnia-deployment/versions
pushd  /tmp/hypersomnia-deployment

APPVEYOR_PATH="https://ci.appveyor.com/api/projects/geneotech/Hypersomnia/artifacts"
WORKFLOWS_PATH="https://nightly.link/TeamHypersomnia/Hypersomnia/workflows"

curl_dl_silent() {
	URL_LEFT=$1
	FILENAME=$2
	FINAL_URL="${URL_LEFT}${FILENAME}"

	echo "Downloading $FILENAME..."
	curl --progress-bar -o "download_$FILENAME.output.log" $FINAL_URL
}

download_from_appveyor() {
	local PLATFORM="Windows"

	mkdir binaries-$PLATFORM
	pushd binaries-$PLATFORM
	curl_dl_silent "$APPVEYOR_PATH/" "Hypersomnia-for-$PLATFORM.exe"
	curl_dl_silent "$APPVEYOR_PATH/" "Hypersomnia-for-$PLATFORM.zip"
	curl_dl_silent "$APPVEYOR_PATH/" "$RELEASE_NOTES_FILENAME"
	dos2unix $RELEASE_NOTES_FILENAME
	popd
}

download_from_github_actions() {
	local PLATFORM=$1
	curl_dl_silent "$WORKFLOWS_PATH/${PLATFORM}_build/master/" "$PLATFORM-binaries.zip"

	unzip binaries.zip -d binaries-$PLATFORM
	pushd binaries-$PLATFORM/
	mv hypersomnia/$RELEASE_NOTES_FILENAME ./
	rmdir hypersomnia
	popd
	rm binaries.zip
}

sign_platform_file() {
	local PLATFORM=$1
	local FILE_PATH=$2
	local SIGN_NAMESPACE=$3

	echo "Signing $FILE_PATH"
	SIGNATURE_FILE_PATH="$FILE_PATH.sig"
	developer_sign_file $SIGN_NAMESPACE $FILE_PATH
}

read_version() {
	local PLATFORM=$1

	local VERSION_PATH="binaries-$PLATFORM/$RELEASE_NOTES_FILENAME"
	VERSION=$(head -n 1 $VERSION_PATH)
}

print_version() {
	read_version $1

	echo "$1 version: $VERSION"
}

create_version_file() {
	PLATFORM=$1
	SIGNATURE_FILE_PATH=$2

	read_version $PLATFORM

	VERSION_FILE_PATH="versions/version-$PLATFORM.txt"
	echo $VERSION > $VERSION_FILE_PATH
	echo "Signature:" >> $VERSION_FILE_PATH
	cat $SIGNATURE_FILE_PATH >> $VERSION_FILE_PATH
}

sign_and_version() {
	local PLATFORM=$1
	local EXTENSION=$2
	local ARTIFACT_TYPE=$3

	local FOLDER="binaries-$PLATFORM"
	local FILE_PATH="$FOLDER/Hypersomnia-for-$PLATFORM.$EXTENSION"

	SIGN_NAMESPACE="hypersomnia"

	if [[ "$ARTIFACT_TYPE" == "updater" ]]; then
		SIGN_NAMESPACE="self_updater"
	fi

	sign_platform_file $PLATFORM $FILE_PATH $SIGN_NAMESPACE

	if [[ "$ARTIFACT_TYPE" == "release" ]]; then
		create_version_file $PLATFORM $SIGNATURE_FILE_PATH
	fi
}

upload_as_version() {
	local AS_VERSION=$1
	mkdir $AS_VERSION

	mv binaries-*/* $AS_VERSION
	mv versions/* $AS_VERSION

	REMOTE_VERSION_DIR="$BUILDS_DIR/$AS_VERSION"
	developer_upload_version_folder $AS_VERSION $REMOTE_VERSION_DIR
}

download_from_appveyor
download_from_github_actions Linux
download_from_github_actions MacOS

print_version Windows
print_version Linux
print_version MacOS

read_version Linux

REFERENCE_VERSION=$VERSION
REFERENCE_NOTICE=""

if [[ "$SET_TO_LATEST_FLAG" == "--set-to-latest" ]]; then
	REFERENCE_NOTICE="Latest version will be set to $REFERENCE_VERSION. "
fi

read -p "${REFERENCE_NOTICE}Sign and upload? (Yy/Nn) " -r

echo
if [[ ! $REPLY =~ ^[Yy]$ ]]
then
	echo "Exiting without signing."
	exit 1
fi

echo "Signing and uploading."

sign_and_version Windows exe "updater"
sign_and_version Windows zip "release"
sign_and_version Linux sfx "updater"
sign_and_version Linux tar.gz "release"
sign_and_version MacOS app.sfx "updater"
sign_and_version MacOS dmg "release"

upload_as_version $REFERENCE_VERSION

popd

if [[ "$SET_TO_LATEST_FLAG" == "--set-to-latest" ]]; then
	./set_latest_version $REFERENCE_VERSION
fi

#!/bin/bash
SET_TO_LATEST_FLAG=$1

# Directory where this script is located
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
echo "Script dir: $SCRIPT_DIR"

. ./ADDRESS
. ./developer_sign_file.sh
. ./developer_upload_version_folder.sh

RELEASE_NOTES_FILENAME="release_notes.txt"

APPVEYOR_PATH="https://ci.appveyor.com/api/projects/geneotech/Hypersomnia/artifacts"
WORKFLOWS_PATH="https://nightly.link/TeamHypersomnia/Hypersomnia/workflows"

APPVEYOR_FILES=("Hypersomnia-for-Windows.exe" "Hypersomnia-for-Windows.zip" $RELEASE_NOTES_FILENAME)

download_file() {
	URL_LEFT=$1
	FILENAME=$2
	FINAL_URL="${URL_LEFT}${FILENAME}"
	LOG_FILENAME="$FILENAME.download.log"

	echo "wget $FINAL_URL"
	#echo "Downloading $FILENAME..."
	wget --show-progress $FINAL_URL -o $LOG_FILENAME
}

download_from_appveyor() {
	local PLATFORM="Windows"

	for i in "${APPVEYOR_FILES[@]}"
	do
		download_file "$APPVEYOR_PATH/" $i
	done
		
	#dos2unix $RELEASE_NOTES_FILENAME
}

download_from_github_actions() {
	local PLATFORM=$1
	download_file "$WORKFLOWS_PATH/${PLATFORM}_build/master/" "$PLATFORM-binaries.zip"
}

unpack_from_appveyor() {
	local PLATFORM="Windows"
	rm -rf binaries-$PLATFORM
	mkdir binaries-$PLATFORM

	for i in "${APPVEYOR_FILES[@]}"
	do
		cp $i binaries-$PLATFORM
	done
}

unpack_from_github_actions() {
	local PLATFORM=$1
	rm -rf binaries-$PLATFORM
	unzip $PLATFORM-binaries.zip -d binaries-$PLATFORM

	pushd binaries-$PLATFORM/
	mv hypersomnia/$RELEASE_NOTES_FILENAME ./
	rmdir hypersomnia
	popd
}

sign_platform_file() {
	local FILE_PATH=$1
	local SIGN_NAMESPACE=$2

	echo "Signing $FILE_PATH"
	SIGNATURE_FILE_PATH="$FILE_PATH.sig"
	developer_sign_file $SIGN_NAMESPACE $FILE_PATH
}

read_version() {
	local PLATFORM=$1

	local VERSION_PATH="binaries-$PLATFORM/$RELEASE_NOTES_FILENAME"

	if [[ "$PLATFORM" == "Windows" ]]; then
		local FIXED_PATH="$VERSION_PATH.dos"

		cp $VERSION_PATH $FIXED_PATH
		dos2unix $FIXED_PATH
		VERSION=$(head -n 1 $FIXED_PATH)
		COMMIT_HASH=$(sed -n '2p' < $FIXED_PATH)
	else
		VERSION=$(head -n 1 $VERSION_PATH)
		COMMIT_HASH=$(sed -n '2p' < $VERSION_PATH)
	fi
}

print_version() {
	read_version $1

	echo "$1 version: $VERSION"
}

create_version_file() {
	PLATFORM=$1
	SIGNATURE_FILE_PATH=$2

	read_version $PLATFORM

	VERSION_FILE_PATH="$OUTPUT_FOLDER/version-$PLATFORM.txt"

	echo "Writing a version file $VERSION_FILE_PATH using signature $SIGNATURE_FILE_PATH..."
	echo $VERSION > $VERSION_FILE_PATH
	echo "Commit hash: $COMMIT_HASH" >> $VERSION_FILE_PATH
	cat $SIGNATURE_FILE_PATH >> $VERSION_FILE_PATH
}

sign_and_version() {
	local PLATFORM=$1
	local EXTENSION=$2
	local ARTIFACT_TYPE=$3

	local FOLDER="binaries-$PLATFORM"
	local FILE_PATH="$FOLDER/Hypersomnia-for-$PLATFORM.$EXTENSION"

	SIGN_NAMESPACE="hypersomnia"

	if [[ "$ARTIFACT_TYPE" == "updater" ]]; then
		SIGN_NAMESPACE="self_updater"
	fi

	if [[ "$SKIP_SIGNING" == "1" ]]; then
		echo "Skipping signing due to SKIP_SIGNING specified."
	else
		sign_platform_file $FILE_PATH $SIGN_NAMESPACE

		if [[ "$ARTIFACT_TYPE" == "updater" ]]; then
			create_version_file $PLATFORM $SIGNATURE_FILE_PATH
		fi

		mv $SIGNATURE_FILE_PATH $OUTPUT_FOLDER
	fi

	cp $FILE_PATH $OUTPUT_FOLDER
}

sign_and_version_AppImage() {
	local FILE_PATH="binaries-Linux/Hypersomnia.AppImage"
	SIGN_NAMESPACE="self_updater"

	if [[ "$SKIP_SIGNING" == "1" ]]; then
		echo "Skipping signing due to SKIP_SIGNING specified."
	else
		sign_platform_file $FILE_PATH $SIGN_NAMESPACE

		create_version_file Linux $SIGNATURE_FILE_PATH
		mv "$OUTPUT_FOLDER/version-Linux.txt" "$OUTPUT_FOLDER/version-AppImage.txt"

		mv $SIGNATURE_FILE_PATH $OUTPUT_FOLDER
	fi

	cp $FILE_PATH $OUTPUT_FOLDER
}

upload_to_steam() {
	local SDK="$SCRIPT_DIR/steamworks/sdk"
	local CONTENT_BUILDER="$SDK/tools/ContentBuilder"
	cp $SCRIPT_DIR/vdf/app_build.vdf $CONTENT_BUILDER/scripts

	local CONTENT="$CONTENT_BUILDER/content"
	local STEAMCMD_DIR="$CONTENT_BUILDER/builder_linux"

	rm -rf $CONTENT
	mkdir $CONTENT

	mkdir $CONTENT/windows
	mkdir $CONTENT/linux
	mkdir $CONTENT/macos

	local APPIMAGE="binaries-Linux/Hypersomnia.AppImage"
	chmod +x $APPIMAGE
	cp $APPIMAGE $CONTENT/linux

	unzip "binaries-Windows/Hypersomnia-for-Windows.zip" -d $CONTENT/windows

	pushd binaries-MacOS
	7z x Hypersomnia-for-MacOS.app.sfx
	mv Hypersomnia.app $CONTENT/macos
	popd

	pushd $STEAMCMD_DIR

	./steamcmd.sh +login $STEAM_LOGIN +run_app_build ../scripts/app_build.vdf +quit

	popd
}

DEPLOYMENT_FOLDER="/tmp/hypersomnia-deployment"
if [[ "$SKIP_DOWNLOADING" == "1" ]]; then
	echo "Reusing $DEPLOYMENT_FOLDER" 
else
	rm -rf $DEPLOYMENT_FOLDER
	mkdir  $DEPLOYMENT_FOLDER
fi

pushd /tmp/hypersomnia-deployment

if [[ "$SKIP_DOWNLOADING" == "1" ]]; then
	echo "SKIPPING DOWNLOAD! Re-using previously downloaded files."
else
	download_from_github_actions Linux
	download_from_github_actions MacOS
	download_from_appveyor
fi

unpack_from_github_actions Linux
unpack_from_github_actions MacOS
unpack_from_appveyor

print_version Windows
print_version Linux
print_version MacOS

read_version Linux

REFERENCE_VERSION=$VERSION
REFERENCE_NOTICE=""

if [[ "$SET_TO_LATEST_FLAG" == "--set-to-latest" ]]; then
	REFERENCE_NOTICE="Latest version will be set to $REFERENCE_VERSION. "
fi

# At some point all versions will NEED to be the same
# for the game not to trigger warnings about binary compatibility.

read -p "${REFERENCE_NOTICE}Sign and upload? (Yy/Nn) " -r

echo
if [[ ! $REPLY =~ ^[Yy]$ ]]
then
	echo "Exiting without signing."
	exit 1
fi

echo "Signing and uploading."

OUTPUT_FOLDER=$REFERENCE_VERSION

rm -rf $OUTPUT_FOLDER
mkdir $OUTPUT_FOLDER

if [[ "$UPLOAD_TO_STEAM" == "1" ]]; then
	message "Uploading to Steam."
	upload_to_steam
fi

sign_and_version_AppImage
sign_and_version Windows exe "updater"
sign_and_version Windows zip "release"
sign_and_version Linux sfx "updater"
sign_and_version Linux tar.gz "release"
sign_and_version MacOS app.sfx "updater"
sign_and_version MacOS dmg "release"

if [[ "$SKIP_UPLOADING" == "1" ]]; then
	echo "Skipping uploading due to SKIP_UPLOADING specified."
else
	developer_upload_version_folder $OUTPUT_FOLDER $REFERENCE_VERSION $SET_TO_LATEST_FLAG
fi

popd

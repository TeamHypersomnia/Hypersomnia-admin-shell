#!/bin/bash
SET_TO_LATEST_FLAG=$1

. ./ADDRESS
. ./developer_sign_file.sh
. ./developer_upload_version_folder.sh

RELEASE_NOTES_FILENAME="release_notes.txt"

APPVEYOR_PATH="https://ci.appveyor.com/api/projects/geneotech/Hypersomnia/artifacts"
WORKFLOWS_PATH="https://nightly.link/TeamHypersomnia/Hypersomnia/workflows"

APPVEYOR_FILES=("Hypersomnia-for-Windows.exe" "Hypersomnia-for-Windows.zip" $RELEASE_NOTES_FILENAME)

download_file() {
	URL_LEFT=$1
	FILENAME=$2
	FINAL_URL="${URL_LEFT}${FILENAME}"
	LOG_FILENAME="$FILENAME.download.log"

	echo "wget $FINAL_URL"
	#echo "Downloading $FILENAME..."
	wget --show-progress $FINAL_URL -o $LOG_FILENAME
}

download_from_appveyor() {
	local PLATFORM="Windows"

	for i in "${APPVEYOR_FILES[@]}"
	do
		download_file "$APPVEYOR_PATH/" $i
	done
		
	dos2unix $RELEASE_NOTES_FILENAME
}

download_from_github_actions() {
	local PLATFORM=$1
	download_file "$WORKFLOWS_PATH/${PLATFORM}_build/master/" "$PLATFORM-binaries.zip"
}

unpack_from_appveyor() {
	local PLATFORM="Windows"
	mkdir binaries-$PLATFORM

	for i in "${APPVEYOR_FILES[@]}"
	do
		cp $i binaries-$PLATFORM
	done
}

unpack_from_github_actions() {
	local PLATFORM=$1
	rm -rf binaries-$PLATFORM
	unzip $PLATFORM-binaries.zip -d binaries-$PLATFORM

	pushd binaries-$PLATFORM/
	mv hypersomnia/$RELEASE_NOTES_FILENAME ./
	rmdir hypersomnia
	popd
}

sign_platform_file() {
	local PLATFORM=$1
	local FILE_PATH=$2
	local SIGN_NAMESPACE=$3

	echo "Signing $FILE_PATH"
	SIGNATURE_FILE_PATH="$FILE_PATH.sig"
	developer_sign_file $SIGN_NAMESPACE $FILE_PATH
}

read_version() {
	local PLATFORM=$1

	local VERSION_PATH="binaries-$PLATFORM/$RELEASE_NOTES_FILENAME"
	VERSION=$(head -n 1 $VERSION_PATH)
}

print_version() {
	read_version $1

	echo "$1 version: $VERSION"
}

create_version_file() {
	PLATFORM=$1
	SIGNATURE_FILE_PATH=$2

	read_version $PLATFORM

	VERSION_FILE_PATH="$OUTPUT_FOLDER/version-$PLATFORM.txt"

	echo "Writing a version file $VERSION_FILE_PATH using signature $SIGNATURE_FILE_PATH..."
	echo $VERSION > $VERSION_FILE_PATH
	echo "Signature:" >> $VERSION_FILE_PATH
	cat $SIGNATURE_FILE_PATH >> $VERSION_FILE_PATH
}

sign_and_version() {
	local PLATFORM=$1
	local EXTENSION=$2
	local ARTIFACT_TYPE=$3

	local FOLDER="binaries-$PLATFORM"
	local FILE_PATH="$FOLDER/Hypersomnia-for-$PLATFORM.$EXTENSION"

	SIGN_NAMESPACE="hypersomnia"

	if [[ "$ARTIFACT_TYPE" == "updater" ]]; then
		SIGN_NAMESPACE="self_updater"
	fi

	sign_platform_file $PLATFORM $FILE_PATH $SIGN_NAMESPACE

	if [[ "$ARTIFACT_TYPE" == "updater" ]]; then
		create_version_file $PLATFORM $SIGNATURE_FILE_PATH
	fi

	mv $SIGNATURE_FILE_PATH $OUTPUT_FOLDER
	mv $FILE_PATH $OUTPUT_FOLDER
}

SKIP_DOWNLOADING=0

if [[ "$SKIP_DOWNLOADING" == "0" ]]; then
	rm -rf /tmp/hypersomnia-deployment
	mkdir  /tmp/hypersomnia-deployment
fi

pushd /tmp/hypersomnia-deployment

if [[ "$SKIP_DOWNLOADING" == "0" ]]; then
	download_from_github_actions Linux
	download_from_github_actions MacOS
	download_from_appveyor
else
	echo "SKIPPING DOWNLOAD! Re-using previously downloaded files."
fi

unpack_from_github_actions Linux
unpack_from_github_actions MacOS
unpack_from_appveyor

print_version Windows
print_version Linux
print_version MacOS

read_version Linux

REFERENCE_VERSION=$VERSION
REFERENCE_NOTICE=""

if [[ "$SET_TO_LATEST_FLAG" == "--set-to-latest" ]]; then
	REFERENCE_NOTICE="Latest version will be set to $REFERENCE_VERSION. "
fi

read -p "${REFERENCE_NOTICE}Sign and upload? (Yy/Nn) " -r

echo
if [[ ! $REPLY =~ ^[Yy]$ ]]
then
	echo "Exiting without signing."
	exit 1
fi

echo "Signing and uploading."

OUTPUT_FOLDER=$REFERENCE_VERSION

rm -rf $OUTPUT_FOLDER
mkdir $OUTPUT_FOLDER

sign_and_version Windows exe "updater"
sign_and_version Windows zip "release"
sign_and_version Linux sfx "updater"
sign_and_version Linux tar.gz "release"
sign_and_version MacOS app.sfx "updater"
sign_and_version MacOS dmg "release"

developer_upload_version_folder $OUTPUT_FOLDER $REFERENCE_VERSION $SET_TO_LATEST_FLAG

popd
